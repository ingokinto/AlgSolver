//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package de.htwk_leipzig.imn.visualg.model.algorithm;

import de.htwk_leipzig.imn.visualg.model.structure.Node;
import de.htwk_leipzig.imn.visualg.model.structure.UnionFindStructure;

public class UnionFindUnionS<T extends Comparable> extends Algorithm<UnionFindStructure<T>> {
    private final T mUnionS;
    private final T mUnionS2;
    private final UnionFindStructure<T> mUnionFindStructure;

    public UnionFindUnionS(UnionFindStructure<T> structure, T unionSValue, T unionS2Value) {
        super(structure);
        this.mUnionS = unionSValue;
        this.mUnionS2 = unionS2Value;
        this.mUnionFindStructure = structure;
        UnionFindStructure.resetCounters();
        this.addPseudoCode(unionSValue, unionS2Value);
    }

    private void addPseudoCode(T unionSValue, T unionS2Value) {
        this.mPseudocode.setShowComparisons(false);
        this.mName = "UnionS";
        this.mParameters = this.mParameters + "Vereinigung-S von Knoten(" + unionSValue + "," + unionS2Value + ")";
        this.mPseudocode.addLine("Rückgabewert: nichts falls erfolgreich bzw. Fehler sonst");
        this.mPseudocode.addLine("wurzel1 ← Finde-Vertreter-S(k1)", 0);
        this.mPseudocode.addLine("wurzel2 ← Finde-Vertreter-S(k2)", 1);
        this.mPseudocode.addLine("if wurzel1.rang > wurzel2.rang", 2);
        this.mPseudocode.addLine("    wurzel2.elter ← wurzel1", 3);
        this.mPseudocode.addLine("else");
        this.mPseudocode.addLine("    wurzel1.elter ← wurzel2", 4);
        this.mPseudocode.addLine("    if wurzel1.rang = wurzel2.rang", 5);
        this.mPseudocode.addLine("        wurzel2.rang ← wurzel2.rang+1", 6);
    }

    protected void execute() {
        if (this.waitAtBreakpoint(-1)) {
            Node node1;
            Node node2;
            try {
                node1 = this.mUnionFindStructure.getNode(this.mUnionS);
                node2 = this.mUnionFindStructure.getNode(this.mUnionS2);
            } catch (NullPointerException var4) {
                this.unionSUnSuccessfulMessage(this.mUnionS, this.mUnionS2);
                return;
            }

            if (node1.compareTo(node2) == 0) {
                this.unionSUnSuccessfulMessage2(node1);
            } else {
                for(; !node1.getParent().equals(node1); node1 = node1.getParent()) {
                    UnionFindStructure.incKeyComparison();
                    if (this.checkBreakpoint(0)) {
                        this.mUnionFindStructure.highlightNode(node1, AlgorithmOperationType.READ);
                        if (!this.waitAtBreakpoint(0)) {
                            return;
                        }
                    }
                }

                UnionFindStructure.incKeyComparison();
                if (this.checkBreakpoint(0)) {
                    this.mUnionFindStructure.highlightNode(node1, AlgorithmOperationType.READ);
                    if (!this.waitAtBreakpoint(0)) {
                        return;
                    }
                }

                this.mUnionFindStructure.reDraw();
                if (this.checkBreakpoint(0)) {
                    this.mUnionFindStructure.highlightNode(node1, AlgorithmOperationType.FOUND);
                    if (!this.waitAtBreakpoint(0)) {
                        return;
                    }
                }

                for(; !node2.getParent().equals(node2); node2 = node2.getParent()) {
                    UnionFindStructure.incKeyComparison();
                    if (this.checkBreakpoint(1)) {
                        this.mUnionFindStructure.highlightNode(node2, AlgorithmOperationType.READ);
                        if (!this.waitAtBreakpoint(1)) {
                            return;
                        }
                    }
                }

                UnionFindStructure.incKeyComparison();
                if (this.checkBreakpoint(1)) {
                    this.mUnionFindStructure.highlightNode(node2, AlgorithmOperationType.READ);
                    if (!this.waitAtBreakpoint(1)) {
                        return;
                    }
                }

                this.mUnionFindStructure.reDraw();
                if (this.checkBreakpoint(1)) {
                    this.mUnionFindStructure.highlightNode(node1, AlgorithmOperationType.FOUND);
                    this.mUnionFindStructure.highlightNode(node2, AlgorithmOperationType.FOUND);
                    if (!this.waitAtBreakpoint(1)) {
                        return;
                    }
                }

                if (this.mUnionFindStructure.findRepresentative(node1) == this.mUnionFindStructure.findRepresentative(node2)) {
                    this.unionSUnSuccessfulMessage3(node1, node2);
                } else if (!this.checkBreakpoint(2) || this.waitAtBreakpoint(2)) {
                    if (this.checkBreakpoint(3)) {
                        if (node1.getBalance() > node2.getBalance()) {
                            this.mUnionFindStructure.drawArrow(node2, node1);
                        } else {
                            this.mUnionFindStructure.drawArrow(node1, node2);
                        }

                        if (!this.waitAtBreakpoint(3)) {
                            return;
                        }
                    }

                    if (node1.getBalance() > node2.getBalance()) {
                        this.mUnionFindStructure.unionS(node2, node1);
                        if (this.checkBreakpoint(4) && !this.waitAtBreakpoint(4)) {
                            return;
                        }
                    } else {
                        if (this.checkBreakpoint(5) && !this.waitAtBreakpoint(5)) {
                            return;
                        }

                        this.mUnionFindStructure.unionS(node1, node2);
                        if (node1.getBalance() == node2.getBalance()) {
                            node2.setBalance(node2.getBalance() + 1);
                        }
                    }

                    UnionFindStructure.incWriteAccess();
                    this.mUnionFindStructure.reDraw();
                    if (!this.checkBreakpoint(6) || this.waitAtBreakpoint(6)) {
                        this.mUnionFindStructure.reDraw();
                        this.unionSSuccessfulMessage();
                    }
                }
            }
        }
    }

    private void unionSSuccessfulMessage() {
        String title = "Union-Ergebnis:";
        String addMessage = "Union von \"" + this.mUnionS + "\" und \"" + this.mUnionS2 + "\" erfolgreich ausgeführt";
        this.resultDialog(title, addMessage, "#dcffb8");
    }

    private void unionSUnSuccessfulMessage(T unionS, T unionS2) {
        String title = "Union-Ergebnis:";
        String errorMessage = "Einer der Knoten \"" + unionS + " oder " + unionS2 + "\" ist im Baum nicht enthalten.";
        this.resultDialog(title, errorMessage, "#FFA5A5");
    }

    private void unionSUnSuccessfulMessage2(Node node) {
        String title = "Union-Fehlermeldung:";
        String errorMessage = "Knoten kann nicht sich selbst unterhängen.";
        this.resultDialog(title, errorMessage, "#FFA5A5");
        this.mUnionFindStructure.highlightNode(node, AlgorithmOperationType.DEFAULT);
    }

    private void unionSUnSuccessfulMessage3(Node unionS, Node unionS2) {
        String title = "Union-Ergebnis:";
        String errorMessage = "Union kann nicht ausgeführt werden, da Knoten bereits vereinigt sind.";
        this.resultDialog(title, errorMessage, "#FFA5A5");
        this.mUnionFindStructure.highlightNode(unionS, AlgorithmOperationType.DEFAULT);
        this.mUnionFindStructure.highlightNode(unionS2, AlgorithmOperationType.DEFAULT);
    }
}
