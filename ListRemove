//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package de.htwk_leipzig.imn.visualg.model.algorithm;

import de.htwk_leipzig.imn.visualg.application.ActiveAlgorithm;
import de.htwk_leipzig.imn.visualg.model.structure.ArrayStructure;
import de.htwk_leipzig.imn.visualg.model.structure.Structure;

public class ListRemove extends Algorithm<ArrayStructure<Integer>> {
    public static boolean msKeyFound;
    private static boolean msJUnitTestCase;
    private int mRemoveValue;

    public static boolean isKeyFound() {
        return msKeyFound;
    }

    public ListRemove(ArrayStructure<Integer> structure, int removeValue, Boolean JunitTestCase) {
        super(structure);
        this.mRemoveValue = removeValue;
        msJUnitTestCase = true;
        this.addPseudoCode();
    }

    public ListRemove(ArrayStructure<Integer> structure, int removeValue) {
        super(structure);
        this.mRemoveValue = removeValue;
        this.addPseudoCode();
        Structure.setKeyComparison(0);
        Structure.setWriteAccess(0);
    }

    protected void execute() {
        this.ifAlgoRunReturn(-1);
        if (this.checkBreakpoint(1)) {
            this.ifAlgoRunReturn(1);
        }

        int i;
        if ((Integer)((ArrayStructure)this.mStructure).getData().get(0) == this.mRemoveValue) {
            Structure.incKeyComparison();
            if (this.checkBreakpoint(2)) {
                ((ArrayStructure)this.mStructure).compare(0, 0, "= " + this.mRemoveValue + " !");
                i = ((ArrayStructure)this.mStructure).getData().indexOf(this.mRemoveValue);
                ((ArrayStructure)this.mStructure).highlightElement(i, AlgorithmOperationType.WRITE);
                this.ifAlgoRunReturn(2);
            }

            Structure.incWriteAccess();
            if (this.checkBreakpoint(3)) {
                ((ArrayStructure)this.mStructure).removeConnection();
                msKeyFound = true;
                ((ArrayStructure)this.mStructure).connectInOneDirectionDesc(1, 1, "anker");
                this.ifAlgoRunReturn(3);
            }

            ((ArrayStructure)this.mStructure).removeConnection();
            ((ArrayStructure)this.mStructure).remove(((ArrayStructure)this.mStructure).getData().indexOf(this.mRemoveValue));
            ((ArrayStructure)this.mStructure).reDraw();
            ActiveAlgorithm.stop();
        } else {
            Structure.incKeyComparison();
            if (this.checkBreakpoint(4)) {
                ((ArrayStructure)this.mStructure).highlightElement(0, AlgorithmOperationType.READ);
                this.ifAlgoRunReturn(4);
            }

            for(i = 1; i < ((ArrayStructure)this.mStructure).getData().size(); ++i) {
                int temp = (Integer)((ArrayStructure)this.mStructure).getData().get(i);
                Structure.incKeyComparison();
                if (this.checkBreakpoint(6)) {
                    ((ArrayStructure)this.mStructure).removeConnection();
                    ((ArrayStructure)this.mStructure).compare(i - 1, i - 1, "= " + this.mRemoveValue + " ?");
                    this.ifAlgoRunReturn(6);
                }

                int index;
                if (this.checkBreakpoint(7)) {
                    ((ArrayStructure)this.mStructure).removeConnection();
                    ((ArrayStructure)this.mStructure).highlightElement(i - 1, AlgorithmOperationType.INACTIVE);
                    index = i - 1;
                    if (((ArrayStructure)this.mStructure).getData().size() > i) {
                        ((ArrayStructure)this.mStructure).connectInOneDirectionDesc(index, i, "Nachfolger prüfen");
                    }

                    ((ArrayStructure)this.mStructure).highlightElement(i, AlgorithmOperationType.READ);
                    this.ifAlgoRunReturn(7);
                }

                if (temp == this.mRemoveValue) {
                    if (this.checkBreakpoint(8)) {
                        ((ArrayStructure)this.mStructure).removeConnection();
                        ((ArrayStructure)this.mStructure).compare(i, i, "= " + this.mRemoveValue + " !");
                        this.ifAlgoRunReturn(8);
                    }

                    msKeyFound = true;
                    if (this.checkBreakpoint(9)) {
                        ((ArrayStructure)this.mStructure).removeConnection();
                        index = ((ArrayStructure)this.mStructure).getData().indexOf(this.mRemoveValue);
                        ((ArrayStructure)this.mStructure).highlightElement(index, AlgorithmOperationType.WRITE);
                        if (((ArrayStructure)this.mStructure).getData().size() > i + 1) {
                            ((ArrayStructure)this.mStructure).connectInOneDirectionDesc(i - 1, i + 1, "Neuer Nachfolger");
                        }

                        this.ifAlgoRunReturn(10);
                    }

                    Structure.incWriteAccess();
                    ((ArrayStructure)this.mStructure).removeConnection();
                    ((ArrayStructure)this.mStructure).remove(((ArrayStructure)this.mStructure).getData().indexOf(this.mRemoveValue));
                    ((ArrayStructure)this.mStructure).reDraw();
                    return;
                }

                if (((ArrayStructure)this.mStructure).size() == i + 1 && !((ArrayStructure)this.mStructure).getData().contains(this.mRemoveValue)) {
                    if (!msJUnitTestCase) {
                        this.removeUnsuccessfulMessage();
                    }

                    msKeyFound = false;
                    if (this.checkBreakpoint(10)) {
                        ((ArrayStructure)this.mStructure).removeConnection();
                        this.ifAlgoRunReturn(10);
                    }
                }
            }

        }
    }

    private void addPseudoCode() {
        this.mPseudocode.setShowRepeatSymbol(false);
        this.mName = "Löschen-Liste";
        this.mParameters = this.mParameters + "Schlüssel löschWert(" + this.mRemoveValue + ")";
        this.mPseudocode.addLine("Rückgabewert: nichts falls erfolgreich bzw. Fehler sonst");
        this.mPseudocode.addLine("switch", 1);
        this.mPseudocode.addLine("case anker = NULL : error \"Element nicht enthalten\"");
        this.mPseudocode.addLine("case anker ≠ NULL ∧ anker.wert = löschWert :", 2);
        this.mPseudocode.addLine("    anker → anker.nächstes", 3);
        this.mPseudocode.addLine("case anker ≠ NULL ∧ anker.wert ≠ löschWert :", 4);
        this.mPseudocode.addLine("    el → anker", 5);
        this.mPseudocode.addLine("    while el.nächstes ≠ NULL ∧ el.nächtes.wert ≠ löschWert", 6);
        this.mPseudocode.addLine("        el → el.nächtes", 7);
        this.mPseudocode.addLine("    if el.nächtes ≠ NULL", 8);
        this.mPseudocode.addLine("        el.nächstes → el.nächtes.nächstes", 9);
        this.mPseudocode.addLine("    else error \"Element nicht gefunden\"", 10);
    }

    private void removeUnsuccessfulMessage() {
        String title = "Löschergebnis:";
        String errorMessage = "Das Element \"" + this.mRemoveValue + "\" ist in der Liste nicht enthalten.";
        this.resultDialog(title, errorMessage, "#FFA5A5");
    }
}
