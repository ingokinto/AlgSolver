//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package de.htwk_leipzig.imn.visualg.model.algorithm;

import de.htwk_leipzig.imn.visualg.model.structure.ArrayStructure;
import de.htwk_leipzig.imn.visualg.model.structure.Structure;

public class StatArrayRemove extends Algorithm<ArrayStructure<Integer>> {
    private int mSchluessel;

    public StatArrayRemove(ArrayStructure<Integer> structure, int schluessel) {
        super(structure);
        this.mSchluessel = schluessel;
        this.init();
        this.addPseudoCode();
    }

    private void init() {
        Structure.setKeyComparison(0);
        Structure.setWriteAccess(0);
        this.updatePseudocode();
    }

    protected void execute() {
        if (this.waitAtBreakpoint(-1)) {
            this.RemoveElementFromStatArray((ArrayStructure)this.mStructure, this.mSchluessel);
        }
    }

    public void RemoveElementFromStatArray(ArrayStructure<Integer> structure, int schluessel) {
        int index = 0;
        int belegteFelder = structure.getBelegteFelder() - 1;

        while(index < belegteFelder && schluessel != (Integer)structure.get(index)) {
            if (this.checkBreakpoint(0)) {
                structure.highlightElement(index, AlgorithmOperationType.READ);
                if (!this.waitAtBreakpoint(0)) {
                    return;
                }
            }

            structure.highlightElement(index, AlgorithmOperationType.INACTIVE);
            ++index;
            if (this.checkBreakpoint(1)) {
                structure.highlightElement(index, AlgorithmOperationType.READ);
                if (!this.waitAtBreakpoint(1)) {
                    return;
                }
            }
        }

        if (index < belegteFelder) {
            if (this.checkBreakpoint(0)) {
                structure.highlightElement(index, AlgorithmOperationType.INACTIVE);
                if (!this.waitAtBreakpoint(0)) {
                    return;
                }
            }
        } else {
            structure.reDraw();
        }

        if (index >= belegteFelder) {
            if (this.checkBreakpoint(2) && !this.waitAtBreakpoint(2)) {
                return;
            }

            this.resultDialog("Element nicht gefunden", "ERROR: Das eingegebene Element konnte nicht gefunden werden.", "#FFA5A5");
        } else {
            if (this.checkBreakpoint(3)) {
                structure.highlightElement(belegteFelder, AlgorithmOperationType.READ);
                structure.highlightElement(index, AlgorithmOperationType.WRITE);
                if (!this.waitAtBreakpoint(3)) {
                    return;
                }
            }

            structure.set(index, (Integer)structure.get(belegteFelder));
            structure.set(belegteFelder, (Object)null);
            --belegteFelder;
            structure.reDraw();
        }

    }

    private void addPseudoCode() {
        this.mName = "Löschen-StatFeld";
        this.mParameters = this.mParameters + "Schlüssel löschWert";
        this.mPseudocode.addLine("Rückgabewert: nichts falls erfolgreich bzw. Fehler sonst");
        this.mPseudocode.addLine("index ← 1");
        this.mPseudocode.addLine("while index ≤ belegteFelder ∧ löschWert ≠ A[index].wert", 0);
        this.mPseudocode.addLine("    index ← index + 1", 1);
        this.mPseudocode.addLine("if index > belegteFelder");
        this.mPseudocode.addLine("    error \"Element nicht gefunden\"", 2);
        this.mPseudocode.addLine("else");
        this.mPseudocode.addLine("    A[index] ← A[belegteFelder]", 3);
        this.mPseudocode.addLine("    belegteFelder ← belegteFelder - 1");
    }
}
