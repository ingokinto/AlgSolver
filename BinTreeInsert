//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package de.htwk_leipzig.imn.visualg.model.algorithm;

import de.htwk_leipzig.imn.visualg.model.structure.BinTreeStructure;
import de.htwk_leipzig.imn.visualg.model.structure.Node;
import java.util.Arrays;

public class BinTreeInsert<T extends Comparable> extends RecursiveAlgorithm<BinTreeStructure<T>, Node<T>> {
    protected T msInsertValue;
    protected static boolean msKeyIncluded;
    protected static boolean msJUnitTestCase;
    protected Node mNode;

    public BinTreeInsert(BinTreeStructure<T> structure, T searchedKey, boolean jUnitTestCase) {
        super(structure);
        this.msInsertValue = searchedKey;
        msJUnitTestCase = true;
        this.addPseudoCode();
    }

    public BinTreeInsert(BinTreeStructure<T> structure, T insertValue) {
        super(structure);
        this.msInsertValue = insertValue;
        this.addPseudoCode();
    }

    protected void execute() {
        Node temp = ((BinTreeStructure)this.mStructure).getRootNode();
        if (this.waitAtBreakpoint(-1)) {
            if (this.checkBreakpoint(0)) {
                ((BinTreeStructure)this.mStructure).highlightNode(temp, AlgorithmOperationType.READ);
                if (!this.waitAtBreakpoint(0)) {
                    return;
                }
            }

            while(temp != null && this.msInsertValue != temp.getValue()) {
                if (this.msInsertValue.compareTo(temp.getValue()) < 0) {
                    if (this.checkBreakpoint(1)) {
                        ((BinTreeStructure)this.mStructure).highlightNode(temp, AlgorithmOperationType.INACTIVE);
                        if (!this.waitAtBreakpoint(1)) {
                            return;
                        }
                    }

                    temp = this.searchLeft(temp);
                } else {
                    if (this.checkBreakpoint(1)) {
                        ((BinTreeStructure)this.mStructure).highlightNode(temp, AlgorithmOperationType.INACTIVE);
                        if (!this.waitAtBreakpoint(1)) {
                            return;
                        }
                    }

                    temp = this.searchRight(temp);
                }
            }

            if (!this.checkBreakpoint(1) || this.waitAtBreakpoint(1)) {
                if (temp == null) {
                    this.incrCounter(0);
                    if (this.checkBreakpoint(2) && !this.waitAtBreakpoint(2)) {
                        return;
                    }

                    this.emptyStack(2);
                    this.mNode = ((BinTreeStructure)this.mStructure).addNode(this.msInsertValue);
                    if (this.checkBreakpoint(3)) {
                        ((BinTreeStructure)this.mStructure).highlightNode(((BinTreeStructure)this.mStructure).getNode(this.msInsertValue), AlgorithmOperationType.WRITE);
                        if (!this.waitAtBreakpoint(3)) {
                            return;
                        }
                    }

                    if (!msJUnitTestCase) {
                        ((BinTreeStructure)this.mStructure).reDraw();
                        this.insertSuccessfulMessage();
                    } else {
                        msKeyIncluded = true;
                    }
                } else {
                    this.incrCounter(1);
                    if (this.checkBreakpoint(4)) {
                        ((BinTreeStructure)this.mStructure).highlightNode(temp, AlgorithmOperationType.FOUND);
                        if (!this.waitAtBreakpoint(4)) {
                            return;
                        }
                    }

                    if (this.checkBreakpoint(5)) {
                        if (!msJUnitTestCase) {
                            this.emptyStack(2);
                            this.insertUnuccessfulMessage();
                        } else {
                            msKeyIncluded = false;
                        }

                        if (!this.waitAtBreakpoint(5)) {
                            return;
                        }
                    }
                }

                if (!msJUnitTestCase) {
                    this.timerForUnhighlightAll();
                }

            }
        }
    }

    protected Node searchRight(Node temp) {
        this.push(temp, 3);
        this.incrCounter(3);
        if (this.checkBreakpoint(9) && !this.waitAtBreakpoint(9)) {
            return null;
        } else {
            if (this.checkBreakpoint(10)) {
                if (temp.getRightChild() != null) {
                    ((BinTreeStructure)this.mStructure).highlightNode(temp.getRightChild(), AlgorithmOperationType.READ);
                }

                if (!this.waitAtBreakpoint(10)) {
                    return null;
                }
            }

            Node mTemp = temp.getRightChild();
            return this.checkBreakpoint(11) && !this.waitAtBreakpoint(11) ? null : mTemp;
        }
    }

    protected Node searchLeft(Node temp) {
        this.push(temp, 6);
        this.incrCounter(2);
        if (this.checkBreakpoint(6) && !this.waitAtBreakpoint(6)) {
            return null;
        } else {
            if (this.checkBreakpoint(7)) {
                if (temp.getLeftChild() != null) {
                    ((BinTreeStructure)this.mStructure).highlightNode(temp.getLeftChild(), AlgorithmOperationType.READ);
                }

                if (!this.waitAtBreakpoint(7)) {
                    return null;
                }
            }

            Node mTemp = temp.getLeftChild();
            return this.checkBreakpoint(8) && !this.waitAtBreakpoint(8) ? null : mTemp;
        }
    }

    protected void addPseudoCode() {
        this.mPseudocode.setShowComparisons(false);
        this.addCounters(4);
        this.mPseudocode.addCounters(Arrays.asList(new PseudoCodeCounter(0, 4), new PseudoCodeCounter(1, 6), new PseudoCodeCounter(2, 8), new PseudoCodeCounter(3, 11)));
        this.mName = "Einfügen-Baum-R";
        this.mParameters = this.mParameters + "Schlüssel neuerWert(" + this.msInsertValue + ")";
        this.mPseudocode.addLine("Rückgabewert: nichts falls erfolgreich bzw. Fehler sonst");
        this.mPseudocode.addLine("el → anker", 0);
        this.mPseudocode.addLine("switch", 1);
        this.mPseudocode.addLine("case el = NULL:", 2);
        this.mPseudocode.addLine("    return ALLOKIERE Element(neuerWert, NULL, NULL)", 3);
        this.mPseudocode.addLine("case neuerWert = el.wert:", 4);
        this.mPseudocode.addLine("    error \"Element schon enthalten\"", 5);
        this.mPseudocode.addLine("case neuerWert < el.wert:", 6);
        this.mPseudocode.addLine("    el.links → EINFÜGEN-BAUM(neuerWert,neueDaten,el.links)", 7);
        this.mPseudocode.addLine("    return el", 8);
        this.mPseudocode.addLine("case neuerWert > el.wert:", 9);
        this.mPseudocode.addLine("    el.rechts → EINFÜGEN-BAUM(neuerWert,neueDaten,el.rechts)", 10);
        this.mPseudocode.addLine("    return el", 11);
    }

    protected void timerForUnhighlightAll() {
        try {
            Thread.sleep(6000L);
        } catch (InterruptedException var2) {
        }

        ((BinTreeStructure)this.mStructure).highlightNode(((BinTreeStructure)this.mStructure).getNodesList(), AlgorithmOperationType.DEFAULT);
    }

    protected void insertSuccessfulMessage() {
        msKeyIncluded = true;
        String title = "Ergebnis:";
        String insertMessage = "Der Knoten \"" + this.msInsertValue + "\" wurde erfolgreich hinzugefügt.";
        this.resultDialog(title, insertMessage, "#dcffb8");
    }

    protected void insertUnuccessfulMessage() {
        msKeyIncluded = false;
        String title = "Ergebnis:";
        String nodeExistMessage = "Der Knoten \"" + this.msInsertValue + "\" ist im Baum bereits enthalten.";
        this.resultDialog(title, nodeExistMessage, "#FFA5A5");
        ((BinTreeStructure)this.mStructure).highlightNode(((BinTreeStructure)this.mStructure).getNodesList(), AlgorithmOperationType.DEFAULT);
    }

    public boolean isKeyIncluded() {
        return msKeyIncluded;
    }
}
