//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package de.htwk_leipzig.imn.visualg.model.algorithm;

import de.htwk_leipzig.imn.visualg.model.structure.Node;
import de.htwk_leipzig.imn.visualg.model.structure.UnionFindStructure;

public class UnionFindGenSingletonS<T extends Comparable> extends Algorithm<UnionFindStructure<T>> {
    private T mInsertValue;
    private final UnionFindStructure<T> mUnionFindStructure;

    public UnionFindGenSingletonS(UnionFindStructure<T> forest, T insertValue) {
        super(forest);
        this.mInsertValue = insertValue;
        this.mUnionFindStructure = forest;
        this.addPseudoCode();
    }

    private void addPseudoCode() {
        this.mPseudocode.setShowComparisons(false);
        this.mName = "Gen-Union-Tree-S";
        this.mParameters = this.mParameters + "Einelementige-Menge(" + this.mInsertValue + ")";
        this.mPseudocode.addLine("Rückgabewert: nichts falls erfolgreich bzw. Fehler sonst");
        this.mPseudocode.addLine("knoten ← new Knoten(x)", 0);
        this.mPseudocode.addLine("knoten.elter ← knoten", 1);
        this.mPseudocode.addLine("knoten.rang ← 0", 2);
        this.mPseudocode.addLine("return knoten", 3);
    }

    protected void execute() {
        if (this.waitAtBreakpoint(-1)) {
            this.mUnionFindStructure.generateSingletonS(this.mInsertValue);
            Node node = this.mUnionFindStructure.getNode(this.mInsertValue);
            if (this.checkBreakpoint(0)) {
                node.setParent((Node)null);
                this.mUnionFindStructure.reDraw();
                if (!this.waitAtBreakpoint(0)) {
                    return;
                }
            }

            if (this.checkBreakpoint(1)) {
                node.setParent(node);
                this.mUnionFindStructure.reDraw();
                if (!this.waitAtBreakpoint(1)) {
                    return;
                }
            }

            if (this.checkBreakpoint(2)) {
                node.setBalance(0);
                if (!this.waitAtBreakpoint(2)) {
                    return;
                }
            }

            if (!this.checkBreakpoint(3) || this.waitAtBreakpoint(3)) {
                this.mUnionFindStructure.reDraw();
                this.newNodeSuccessfulMessage();
            }
        }
    }

    private void newNodeSuccessfulMessage() {
        String title = "Erstellen-Ergebnis:";
        String addMessage = "Element \"" + this.mInsertValue + "\" erfolgreich hinzugefügt.";
        this.resultDialog(title, addMessage, "#dcffb8");
    }
}
